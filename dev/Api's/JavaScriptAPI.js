var __mod__ = null;
var __name__ = "JS API";
var __dir__ = "/storage/sdcard0/games/com.mojang/mods/JS API/";
var __config__ = null;
function __debug_typecheck__()
function runCustomSource()
var BlockID = {};
var ItemID = {};
function importLib()
function IMPORT()
function getCoreAPILevel()
function runOnMainThread(func)
function getMCPEVersion()
var Debug = {};
Debug.sysTime();
Debug.addParticle(x, y, z, id, vx, vy, vz, data);
Debug.message(message);
Debug.warning(message);
Debug.error(message);
Debug.m();
Debug.bitmap(bitmap, title);
var FileTools = {};
FileTools.mntdir = "/mnt";
FileTools.root = "/storage/sdcard0/";
FileTools.workdir = "games/com.mojang/coreengine/";
FileTools.moddir = "games/com.mojang/mods/";
FileTools.modpedir = "games/com.mojang/modpe/";
FileTools.mkdir(dir);
FileTools.mkworkdirs();
FileTools.getFullPath(path);
FileTools.isExists(path);
FileTools.WriteText(file, text, add);
FileTools.ReadText(file);
FileTools.WriteImage(file, bitmap);
FileTools.ReadImage(file);
FileTools.ReadTextAsset(name);
FileTools.ReadImageAsset(name);
FileTools.ReadBytesAsset(name);
FileTools.GetListOfDirs(path);
FileTools.GetListOfFiles(path, ext);
FileTools.ReadKeyValueFile(dir, specialSeparator);
FileTools.WriteKeyValueFile(dir, data, specialSeparator);
FileTools.ReadJSON(dir);
FileTools.WriteJSON(dir, obj, beautify);
var Logger = {};
var Translation = {};
var Threading = {};
Threading.threads = {};
Threading.formatFatalErrorMessage(error, name, priority, formatFunc);
Threading.initThread(name, func, priority, isErrorFatal, formatFunc);
Threading.getThread(name);
function Config()
var UI = {};
var UpdatableAPI = {};
var Updatable = {};
var TileEntity = {};
TileEntity.tileEntityPrototypes = {};
TileEntity.tileEntityList = {};
TileEntity.resetEngine();
TileEntity.registerPrototype(blockID, customPrototype);
TileEntity.getPrototype(blockID);
TileEntity.isTileEntityBlock(blockID);
TileEntity.createTileEntityForPrototype(Prototype, addToUpdate);
TileEntity.addTileEntity(x, y, z);
TileEntity.addUpdatableAsTileEntity(updatable);
TileEntity.getTileEntity(x, y, z);
TileEntity.destroyTileEntity(tileEntity);
TileEntity.destroyTileEntityAtCoords(x, y, z);
TileEntity.isTileEntityLoaded(tileEntity);
TileEntity.checkTileEntityForIndex(index);
TileEntity.CheckTileEntities();
TileEntity.DeployDestroyChecker(tileEntity);
var MobRegistry = {};
MobRegistry.customEntities = {};
MobRegistry.loadedEntities = {};
MobRegistry.registerEntity(name);
MobRegistry.registerUpdatableAsEntity(updatable);
MobRegistry.spawnEntityAsPrototype(typeName, coords, extraData);
MobRegistry.getEntityUpdatable(entity);
MobRegistry.registerNativeEntity(entity);
MobRegistry.registerEntityRemove(entity);
MobRegistry.resetEngine();
var MobSpawnRegistry = {};
MobSpawnRegistry.spawnData = {};
MobSpawnRegistry.registerSpawn(entityType, rarity, condition, denyNaturalDespawn);
MobSpawnRegistry.getRandomSpawn(rarityMultiplier);
MobSpawnRegistry.getRandPosition();
MobSpawnRegistry.executeSpawn(spawn, position);
MobSpawnRegistry.counter = 0;
MobSpawnRegistry.tick();
MobSpawnRegistry.onChunkGenerated(x, z);
var Callback = {};
function GameObject(name, Prototype)
var GameObjectRegistry = {};
GameObjectRegistry.gameObjectTypes = {};
GameObjectRegistry.activeGameObjects = {};
GameObjectRegistry.genUniqueName(name);
GameObjectRegistry.registerClass(gameObjectClass);
GameObjectRegistry.deployGameObject(gameobject);
GameObjectRegistry.addGameObject(gameobject);
GameObjectRegistry.removeGameObject(gameobject);
GameObjectRegistry.resetEngine();
GameObjectRegistry.getAllByType(type, clone);
GameObjectRegistry.callForType();
GameObjectRegistry.callForTypeSafe();
var ModAPI = {};
ModAPI.modAPIs = {};
ModAPI.registerAPI(name, api, descr);
ModAPI.requireAPI(name);
ModAPI.requireGlobal(name);
ModAPI.requireAPIdoc(name);
ModAPI.requireAPIPropertyDoc(name, prop);
ModAPI.getModByName(modName);
ModAPI.isModLoaded(modName);
ModAPI.addAPICallback(apiName, func);
ModAPI.addModCallback(modName, func);
ModAPI.getModList();
ModAPI.getModPEList();
ModAPI.addTexturePack(path);
ModAPI.cloneAPI(api, deep);
ModAPI.inheritPrototypes(source, target);
ModAPI.cloneObject(source, deep, rec);
ModAPI.debugCloneObject(source, deep, rec);
var Saver = {};
Saver.addSavesScope(name, loadFunc, saveFunc);
Saver.registerScopeSaver(name, saver);
Saver.registerObjectSaver(name, saver);
Saver.registerObject(obj, saverId);
Saver.setObjectIgnored(obj, ignore);
var World = {};
World.isLoaded = false;
World.setLoaded(isLoaded);
World.isWorldLoaded();
World.getThreadTime();
World.nativeSetBlock();
World.nativeGetBlockID();
World.nativeGetBlockData(x, y, z);
World.setBlock(x, y, z, id, data);
World.setFullBlock(x, y, z, fullTile);
World.getBlock(x, y, z);
World.getBlockID(x, y, z);
World.getBlockData(x, y, z);
World.destroyBlock(x, y, z, drop);
World.getLightLevel(x, y, z);
World.isChunkLoaded(x, z);
World.isChunkLoadedAt(x, y, z);
World.getTileEntity(x, y, z);
World.addTileEntity(x, y, z);
World.removeTileEntity(x, y, z);
World.getContainer(x, y, z);
World.getWorldTime();
World.setWorldTime(time);
World.setDayMode(day);
World.setNightMode(night);
World.getWeather();
World.setWeather(weather);
World.drop(x, y, z, id, count, data);
World.explode(x, y, z, power, someBoolean);
World.getBiome(x, z);
World.getBiomeName(x, z);
World.getGrassColor(x, z);
World.setGrassColor(x, z, color);
World.getGrassColorRGB(x, z);
World.setGrassColorRGB(x, z, rgb);
World.canSeeSky(x, y, z);
World.playSound(x, y, z, name, volume, pitch);
World.playSoundAtEntity(entity, name, volume, pitch);
var Entity = {};
Entity.getAll();
Entity.getAllJS();
Entity.EXTRA_DATA_PREFIX = "core.engine.";
Entity.getExtra(ent, name);
Entity.putExtra(ent, name, extra);
Entity.getExtraJson(ent, name);
Entity.putExtraJson(ent, name, obj);
Entity.addEffect(ent, effectId, effectTime, effectData, amplifier, particles);
Entity.clearEffect(ent, id);
Entity.clearEffects(ent);
Entity.damageEntity(ent, damage, cause, params);
Entity.healEntity(ent, heal);
Entity.getType(ent);
Entity.setHitbox(ent, w, h);
Entity.isExist(entity);
Entity.spawn(x, y, z, type, skin);
Entity.spawnCustom(name, x, y, z, extra);
Entity.spawnCustomAtCoords(name, coords, extra);
Entity.spawnAtCoords(coords, type, skin);
Entity.remove(entity);
Entity.getCustom(entity);
Entity.getAge(ent);
Entity.setAge(ent, age);
Entity.getSkin(ent);
Entity.setSkin(ent, skin);
Entity.setTexture(ent, texture);
Entity.getRender(ent);
Entity.setRender(ent, render);
Entity.rideAnimal(ent1, ent2);
Entity.getNameTag(ent);
Entity.setNameTag(ent, tag);
Entity.getTarget(ent);
Entity.setTarget(ent, target);
Entity.getMobile(ent, mobile);
Entity.setMobile(ent, mobile);
Entity.getSneaking(ent);
Entity.setSneaking(ent, sneak);
Entity.getRider(ent);
Entity.getRiding(ent);
Entity.setFire(ent, fire, force);
Entity.health(entity);
Entity.getHealth(ent);
Entity.setHealth(ent, health);
Entity.getMaxHealth(ent);
Entity.setMaxHealth(ent, health);
Entity.setPosition(ent, x, y, z);
Entity.getPosition(ent);
Entity.addPosition(ent, x, y, z);
Entity.setVelocity(ent, x, y, z);
Entity.getVelocity(ent);
Entity.addVelocity(ent, x, y, z);
Entity.getDistanceBetweenCoords(coords1, coords2);
Entity.getDistanceToCoords(ent, coords);
Entity.getDistanceToEntity(ent1, ent2);
Entity.getXZPlayerDis(entity);
Entity.getLookAngle(ent);
Entity.setLookAngle(ent, yaw, pitch);
Entity.getLookVectorByAngle(angle);
Entity.getLookVector(ent);
Entity.getLookAt(ent, x, y, z);
Entity.lookAt(ent, x, y, z);
Entity.lookAtCoords(ent, coords);
Entity.moveToTarget(ent, target, params);
Entity.moveToAngle(ent, angle, params);
Entity.moveToLook(ent, params);
Entity.getMovingVector(ent);
Entity.getMovingAngle(ent);
Entity.getMovingAngleByPositions(pos1, pos2);
Entity.findNearest(coords, type, maxRange);
Entity.getAllInRange(coords, maxRange, type);
Entity.getInventory(ent, handleNames, handleEnchant);
Entity.getArmorSlot(ent, slot);
Entity.setArmorSlot(ent, slot, id, count, data);
Entity.getCarriedItem(ent, handleEnchant, handleNames);
Entity.setCarriedItem(ent, id, count, data, enchant, name);
Entity.getDroppedItem(ent);
Entity.setDroppedItem(ent, id, count, data);
Entity.getProjectileItem(projectile);
var Player = {};
Player.get();
Player.getNameForEnt(ent);
Player.getName();
Player.getDimension();
Player.isPlayer(ent);
Player.getPointed();
Player.getInventory(loadPart, handleEnchant, handleNames);
Player.addItemToInventory(id, count, data);
Player.getCarriedItem(handleEnchant, handleNames);
Player.setCarriedItem(id, count, data, enchant, name);
Player.decreaseCarriedItem(count);
Player.getInventorySlot(slot);
Player.setInventorySlot(slot, id, count, data);
Player.getArmorSlot(slot);
Player.setArmorSlot(slot, id, count, data);
Player.getSelectedSlotId();
Player.setSelectedSlotId(slot);
Player.setPosition(x, y, z);
Player.getPosition();
Player.addPosition(x, y, z);
Player.setVelocity(x, y, z);
Player.getVelocity();
Player.addVelocity(x, y, z);
Player.experience();
Player.getExperience();
Player.setExperience(exp);
Player.addExperience(exp);
Player.level();
Player.getLevel();
Player.setLevel(level);
Player.addLevel(level);
Player.flying();
Player.getFlyingEnabled();
Player.setFlyingEnabled(enabled);
Player.getFlying();
Player.setFlying(enabled);
Player.exhaustion();
Player.getExhaustion();
Player.setExhaustion(value);
Player.hunger();
Player.getHunger();
Player.setHunger(value);
Player.saturation();
Player.getSaturation();
Player.setSaturation(value);
Player.health();
Player.getHealth();
Player.setHealth(value);
Player.score();
Player.getScore();
Player.setFov(fov);
Player.resetFov();
Player.setCameraEntity(ent);
Player.resetCameraEntity();
var Game = {};
Game.prevent();
Game.message(msg);
Game.tipMessage(msg);
Game.dialogMessage(message, title);
Game.setDifficulty(difficulty);
Game.getDifficulty();
Game.getMinecraftVersion();
Game.getEngineVersion();
function Render(params)
function Texture(path)
function EntityModel(parentModel)
function EntityModelWatcher(entity, model)
function EntityAIClass(customPrototype)
function EntityAIWatcher(customPrototype)
var EntityAI = {};
EntityAI.Idle = {};
EntityAI.Follow = {};
EntityAI.Panic = {};
EntityAI.Wander = {};
EntityAI.Attack = {};
EntityAI.Swim = {};
EntityAI.PanicWatcher = {};
var GenerationUtils = {};
GenerationUtils.isTerrainBlock(id);
GenerationUtils.isTransparentBlock(id);
GenerationUtils.canSeeSky(x, y, z);
GenerationUtils.randomXZ(cx, cz);
GenerationUtils.randomCoords(cx, cz, lowest, highest);
GenerationUtils.findSurface(x, y, z);
GenerationUtils.findHighSurface(x, z);
GenerationUtils.findLowSurface(x, z);
GenerationUtils.__lockedReal = {};
GenerationUtils.__lockedReal.id = 0;
GenerationUtils.__lockedReal.data = 0;
GenerationUtils.lockInBlock(id, data, checkerTile, checkerMode);
GenerationUtils.setLockedBlock(x, y, z);
GenerationUtils.genMinable(x, y, z, params);
GenerationUtils.generateOre(x, y, z, id, data, amount, noStoneCheck);
var Animation = {};
Animation.base(x, y, z);
Animation.Base(x, y, z);
Animation.item(x, y, z);
Animation.Item(x, y, z);
var Particles = {};
var IDRegistry = {};
var IDData = {};
IDData.item = {};
IDData.block = {};
var Block = {};
Block.idSource = {};
Block.dropFunctions = {};
Block.getNumericId(id);
Block.createBlock(namedID, defineData, blockType);
Block.createBlockWithRotation(namedID, defineData, blockType);
Block.isNativeTile(id);
Block.registerDropFunctionForID(numericID, dropFunc, level);
Block.registerDropFunction(namedID, dropFunc, level);
Block.defaultDropFunction(blockCoords, blockID, blockData, diggingLevel);
Block.getDropFunction(id);
Block.setDestroyLevelForID(id, level);
Block.setDestroyLevel(namedID, level);
Block.setDestroyTime(namedID, time);
Block.getDestroyTime(numericID);
Block.setTempDestroyTime(numericID, time);
Block.setBlockMaterial(namedID, material, level);
Block.setRedstoneTile(namedID, data, isRedstone);
Block.onBlockDestroyed(coords, fullTile);
Block.getBlockDropViaItem(block, item, coords);
Block.placeFuncs = {};
Block.registerPlaceFunctionForID(block, func);
Block.registerPlaceFunction(namedID, func);
Block.getPlaceFunc(block);
Block.setBlockShape(id, pos1, pos2, data);
Block.setShape(id, x1, y1, z1, x2, y2, z2, data);
Block.createSpecialType(description, nameKey);
Block.TYPE_BASE = "createBlock";
Block.TYPE_ROTATION = "createBlockWithRotation";
Block.setPrototype(namedID, Prototype);
Block.setRandomTickCallback(id, callback);
Block.setAnimateTickCallback(id, callback);
var BlockRenderer = {};
var ICRender = {};
var Item = {};
Item.idSource = {};
Item.useFunctions = {};
Item.throwableFunctions = {};
Item.getNumericId(id);
Item.getItemById(id);
Item.createItem(namedID, name, texture, params);
Item.createFoodItem(namedID, name, texture, params);
Item.createFuelItem(namedID, name, texture, params);
Item.createArmorItem(namedID, name, texture, params);
Item.createThrowableItem(namedID, name, texture, params);
Item.isNativeItem(id);
Item.getMaxDamage(id);
Item.getMaxStack(id);
Item.getName(id, data, encode);
Item.isValid(id, data);
Item.addToCreative(id, count, data);
Item.describeItem(numericID, description);
Item.setCategory(id, category);
Item.setEnchantType(id, enchant, value);
Item.setToolRender(id, enabled);
Item.setMaxDamage(id, maxdamage);
Item.setGlint(id, enabled);
Item.setLiquidClip(id, enabled);
Item.setStackedByData(id, enabled);
Item.setProperties(id, props);
Item.setUseAnimation(id, animType);
Item.registerUseFunctionForID(numericID, useFunc);
Item.registerUseFunction(namedID, useFunc);
Item.onItemUsed(coords, item, block);
Item.registerThrowableFunctionForID(numericID, useFunc);
Item.registerThrowableFunction(namedID, useFunc);
Item.onProjectileHit(projectile, item, target);
Item.iconOverrideFunctions = {};
Item.registerIconOverrideFunction(namedID, func);
Item.onIconOverride(item);
Item.nameOverrideFunctions = {};
Item.registerNameOverrideFunction(namedID, func);
Item.onNameOverride(item, name);
Item.noTargetUseFunctions = {};
Item.registerNoTargetUseFunction(namedID, func);
Item.onUseNoTarget(item);
Item.usingReleasedFunctions = {};
Item.registerUsingReleasedFunction(namedID, func);
Item.onUsingReleased(item, ticks);
Item.usingCompleteFunctions = {};
Item.registerUsingCompleteFunction(namedID, func);
Item.onUsingComplete(item);
Item.dispenseFunctions = {};
Item.registerDispenseFunction(namedID, func);
Item.onDispense(coords, item);
Item.TYPE_BASE = "createItem";
Item.TYPE_FOOD = "createFoodItem";
Item.TYPE_ARMOR = "createArmorItem";
Item.TYPE_THROWABLE = "createThrowableItem";
Item.setPrototype(namedID, Prototype);
var Recipes = {};
var ToolAPI = {};
ToolAPI.blockMaterials = {};
ToolAPI.toolMaterials = {};
ToolAPI.toolData = {};
ToolAPI.blockData = {};
ToolAPI.needDamagableItemFix = false;
ToolAPI.addBlockMaterial(name, breakingMultiplier);
ToolAPI.addToolMaterial(name, material);
ToolAPI.registerTool(id, toolMaterial, blockMaterials, params);
ToolAPI.registerSword(id, toolMaterial, params);
ToolAPI.registerBlockMaterial(uid, materialName, level, isNative);
ToolAPI.registerBlockDiggingLevel(uid, level);
ToolAPI.registerBlockMaterialAsArray(materialName, UIDs, isNative);
ToolAPI.refresh();
ToolAPI.getBlockData(blockID);
ToolAPI.getBlockMaterial(blockID);
ToolAPI.getBlockDestroyLevel(blockID);
ToolAPI.getEnchantExtraData(enchant);
ToolAPI.fortuneDropModifier(drop, level);
ToolAPI.getDestroyTimeViaTool(fullBlock, toolItem, coords, ignoreNative);
ToolAPI.getToolData(itemID);
ToolAPI.getToolLevel(itemID);
ToolAPI.getToolLevelViaBlock(itemID, blockID);
ToolAPI.getCarriedToolData();
ToolAPI.getCarriedToolLevel();
ToolAPI.startDestroyHook(coords, block, carried);
ToolAPI.destroyBlockHook(coords, block, carried);
ToolAPI.LastAttackTime = 0;
ToolAPI.playerAttackHook(attackerPlayer, victimEntity, carried);
ToolAPI.resetEngine();
ToolAPI.dropExpOrbs(x, y, z, value);
ToolAPI.dropOreExp(coords, minVal, maxVal, modifier);
var Armor = {};
Armor.registerFuncs(id, funcs);
Armor.preventDamaging(id);
var LiquidRegistry = {};
LiquidRegistry.liquidStorageSaverId = 1306847136;
LiquidRegistry.liquids = {};
LiquidRegistry.registerLiquid(key, name, uiTextures, modelTextures);
LiquidRegistry.getLiquidData(key);
LiquidRegistry.isExists(key);
LiquidRegistry.getLiquidName(key);
LiquidRegistry.getLiquidUITexture(key, width, height);
LiquidRegistry.getLiquidUIBitmap(key, width, height);
LiquidRegistry.FullByEmpty = {};
LiquidRegistry.EmptyByFull = {};
LiquidRegistry.registerItem(liquid, empty, full);
LiquidRegistry.getEmptyItem(id, data);
LiquidRegistry.getItemLiquid(id, data);
LiquidRegistry.getFullItem(id, data, liquid);
LiquidRegistry.Storage(tileEntity);
var Native = {};
Native.ArmorType = {};
Native.ArmorType.boots = 3;
Native.ArmorType.chestplate = 1;
Native.ArmorType.helmet = 0;
Native.ArmorType.leggings = 2;
Native.ItemCategory = {};
Native.ItemCategory.DECORATION = 2;
Native.ItemCategory.FOOD = 4;
Native.ItemCategory.INTERNAL = 0;
Native.ItemCategory.MATERIAL = 1;
Native.ItemCategory.TOOL = 3;
Native.ParticleType = {};
Native.ParticleType.angryVillager = 32;
Native.ParticleType.bubble = 1;
Native.ParticleType.cloud = 4;
Native.ParticleType.crit = 2;
Native.ParticleType.dripLava = 24;
Native.ParticleType.dripWater = 23;
Native.ParticleType.enchantmenttable = 32;
Native.ParticleType.fallingDust = 26;
Native.ParticleType.flame = 7;
Native.ParticleType.happyVillager = 33;
Native.ParticleType.heart = 17;
Native.ParticleType.hugeexplosion = 14;
Native.ParticleType.hugeexplosionSeed = 15;
Native.ParticleType.ink = 25;
Native.ParticleType.itemBreak = 12;
Native.ParticleType.largeexplode = 5;
Native.ParticleType.lava = 8;
Native.ParticleType.mobFlame = 16;
Native.ParticleType.note = 36;
Native.ParticleType.portal = 20;
Native.ParticleType.rainSplash = 21;
Native.ParticleType.redstone = 10;
Native.ParticleType.slime = 30;
Native.ParticleType.smoke = 4;
Native.ParticleType.smoke2 = 9;
Native.ParticleType.snowballpoof = 13;
Native.ParticleType.spell = 29;
Native.ParticleType.spell2 = 28;
Native.ParticleType.spell3 = 27;
Native.ParticleType.splash = 22;
Native.ParticleType.suspendedTown = 19;
Native.ParticleType.terrain = 16;
Native.ParticleType.waterWake = 31;
Native.Color = {};
Native.Color.AQUA = "Â§b";
Native.Color.BEGIN = "Â§";
Native.Color.BLACK = "Â§0";
Native.Color.BLUE = "Â§9";
Native.Color.BOLD = "Â§l";
Native.Color.DARK_AQUA = "Â§3";
Native.Color.DARK_BLUE = "Â§1";
Native.Color.DARK_GRAY = "Â§8";
Native.Color.DARK_GREEN = "Â§2";
Native.Color.DARK_PURPLE = "Â§5";
Native.Color.DARK_RED = "Â§4";
Native.Color.GOLD = "Â§6";
Native.Color.GRAY = "Â§7";
Native.Color.GREEN = "Â§a";
Native.Color.LIGHT_PURPLE = "Â§d";
Native.Color.RED = "Â§c";
Native.Color.RESET = "Â§r";
Native.Color.WHITE = "Â§f";
Native.Color.YELLOW = "Â§e";
Native.EntityType = {};
Native.EntityType.ARROW = 80;
Native.EntityType.BAT = 19;
Native.EntityType.BLAZE = 43;
Native.EntityType.BOAT = 90;
Native.EntityType.CAVE_SPIDER = 40;
Native.EntityType.CHICKEN = 10;
Native.EntityType.COW = 11;
Native.EntityType.CREEPER = 33;
Native.EntityType.EGG = 82;
Native.EntityType.ENDERMAN = 38;
Native.EntityType.EXPERIENCE_ORB = 69;
Native.EntityType.EXPERIENCE_POTION = 68;
Native.EntityType.FALLING_BLOCK = 66;
Native.EntityType.FIREBALL = 85;
Native.EntityType.FISHING_HOOK = 77;
Native.EntityType.GHAST = 41;
Native.EntityType.IRON_GOLEM = 20;
Native.EntityType.ITEM = 64;
Native.EntityType.LAVA_SLIME = 42;
Native.EntityType.LIGHTNING_BOLT = 93;
Native.EntityType.MINECART = 84;
Native.EntityType.MUSHROOM_COW = 16;
Native.EntityType.OCELOT = 22;
Native.EntityType.PAINTING = 83;
Native.EntityType.PIG = 12;
Native.EntityType.PIG_ZOMBIE = 36;
Native.EntityType.PLAYER = 63;
Native.EntityType.POLAR_BEAR = 28;
Native.EntityType.PRIMED_TNT = 65;
Native.EntityType.RABBIT = 18;
Native.EntityType.SHEEP = 13;
Native.EntityType.SILVERFISH = 39;
Native.EntityType.SKELETON = 34;
Native.EntityType.SLIME = 37;
Native.EntityType.SMALL_FIREBALL = 94;
Native.EntityType.SNOWBALL = 81;
Native.EntityType.SNOW_GOLEM = 21;
Native.EntityType.SPIDER = 35;
Native.EntityType.SQUID = 17;
Native.EntityType.THROWN_POTION = 86;
Native.EntityType.VILLAGER = 15;
Native.EntityType.WOLF = 14;
Native.EntityType.ZOMBIE = 32;
Native.EntityType.ZOMBIE_VILLAGER = 44;
Native.MobRenderType = {};
Native.MobRenderType.arrow = 25;
Native.MobRenderType.bat = 10;
Native.MobRenderType.blaze = 18;
Native.MobRenderType.boat = 35;
Native.MobRenderType.camera = 48;
Native.MobRenderType.chicken = 5;
Native.MobRenderType.cow = 6;
Native.MobRenderType.creeper = 22;
Native.MobRenderType.egg = 28;
Native.MobRenderType.enderman = 24;
Native.MobRenderType.expPotion = 45;
Native.MobRenderType.experienceOrb = 40;
Native.MobRenderType.fallingTile = 33;
Native.MobRenderType.fireball = 37;
Native.MobRenderType.fishHook = 26;
Native.MobRenderType.ghast = 17;
Native.MobRenderType.human = 3;
Native.MobRenderType.ironGolem = 42;
Native.MobRenderType.item = 4;
Native.MobRenderType.lavaSlime = 16;
Native.MobRenderType.lightningBolt = 41;
Native.MobRenderType.map = 50;
Native.MobRenderType.minecart = 34;
Native.MobRenderType.mushroomCow = 7;
Native.MobRenderType.ocelot = 43;
Native.MobRenderType.painting = 32;
Native.MobRenderType.pig = 8;
Native.MobRenderType.player = 27;
Native.MobRenderType.rabbit = 46;
Native.MobRenderType.sheep = 9;
Native.MobRenderType.silverfish = 21;
Native.MobRenderType.skeleton = 19;
Native.MobRenderType.slime = 23;
Native.MobRenderType.smallFireball = 38;
Native.MobRenderType.snowGolem = 44;
Native.MobRenderType.snowball = 29;
Native.MobRenderType.spider = 20;
Native.MobRenderType.squid = 36;
Native.MobRenderType.thrownPotion = 31;
Native.MobRenderType.tnt = 2;
Native.MobRenderType.unknownItem = 30;
Native.MobRenderType.villager = 12;
Native.MobRenderType.villagerZombie = 39;
Native.MobRenderType.witch = 47;
Native.MobRenderType.wolf = 11;
Native.MobRenderType.zombie = 14;
Native.MobRenderType.zombiePigman = 15;
Native.PotionEffect = {};
Native.PotionEffect.absorption = 22;
Native.PotionEffect.blindness = 15;
Native.PotionEffect.confusion = 9;
Native.PotionEffect.damageBoost = 5;
Native.PotionEffect.damageResistance = 11;
Native.PotionEffect.digSlowdown = 4;
Native.PotionEffect.digSpeed = 3;
Native.PotionEffect.fireResistance = 12;
Native.PotionEffect.harm = 7;
Native.PotionEffect.heal = 6;
Native.PotionEffect.healthBoost = 21;
Native.PotionEffect.hunger = 17;
Native.PotionEffect.invisibility = 14;
Native.PotionEffect.jump = 8;
Native.PotionEffect.movementSlowdown = 2;
Native.PotionEffect.movementSpeed = 1;
Native.PotionEffect.nightVision = 16;
Native.PotionEffect.poison = 19;
Native.PotionEffect.regeneration = 10;
Native.PotionEffect.saturation = 23;
Native.PotionEffect.waterBreathing = 13;
Native.PotionEffect.weakness = 18;
Native.PotionEffect.wither = 20;
Native.Dimension = {};
Native.Dimension.END = 2;
Native.Dimension.NETHER = 1;
Native.Dimension.NORMAL = 0;
Native.ItemAnimation = {};
Native.ItemAnimation.bow = 4;
Native.ItemAnimation.normal = 0;
Native.BlockSide = {};
Native.BlockSide.DOWN = 0;
Native.BlockSide.EAST = 5;
Native.BlockSide.NORTH = 2;
Native.BlockSide.SOUTH = 3;
Native.BlockSide.UP = 1;
Native.BlockSide.WEST = 4;
Native.Enchantment = {};
Native.Enchantment.AQUA_AFFINITY = 7;
Native.Enchantment.BANE_OF_ARTHROPODS = 11;
Native.Enchantment.BLAST_PROTECTION = 3;
Native.Enchantment.DEPTH_STRIDER = 8;
Native.Enchantment.EFFICIENCY = 15;
Native.Enchantment.FEATHER_FALLING = 2;
Native.Enchantment.FIRE_ASPECT = 13;
Native.Enchantment.FIRE_PROTECTION = 1;
Native.Enchantment.FLAME = 21;
Native.Enchantment.FORTUNE = 18;
Native.Enchantment.INFINITY = 22;
Native.Enchantment.KNOCKBACK = 12;
Native.Enchantment.LOOTING = 14;
Native.Enchantment.LUCK_OF_THE_SEA = 23;
Native.Enchantment.LURE = 24;
Native.Enchantment.POWER = 19;
Native.Enchantment.PROJECTILE_PROTECTION = 4;
Native.Enchantment.PROTECTION = 0;
Native.Enchantment.PUNCH = 20;
Native.Enchantment.RESPIRATION = 6;
Native.Enchantment.SHARPNESS = 9;
Native.Enchantment.SILK_TOUCH = 16;
Native.Enchantment.SMITE = 10;
Native.Enchantment.THORNS = 5;
Native.Enchantment.UNBREAKING = 17;
Native.EnchantType = {};
Native.EnchantType.all = 16383;
Native.EnchantType.axe = 512;
Native.EnchantType.book = 16383;
Native.EnchantType.bow = 32;
Native.EnchantType.fishingRod = 4096;
Native.EnchantType.flintAndSteel = 256;
Native.EnchantType.hoe = 64;
Native.EnchantType.pickaxe = 1024;
Native.EnchantType.shears = 128;
Native.EnchantType.shovel = 2048;
Native.EnchantType.weapon = 16;
Native.BlockRenderLayer = {};
Native.BlockRenderLayer.alpha = 4099;
Native.BlockRenderLayer.alpha_seasons = 5;
Native.BlockRenderLayer.alpha_single_side = 4;
Native.BlockRenderLayer.blend = 6;
Native.BlockRenderLayer.doubleside = 2;
Native.BlockRenderLayer.far = 9;
Native.BlockRenderLayer.opaque = 0;
Native.BlockRenderLayer.opaque_seasons = 1;
Native.BlockRenderLayer.seasons_far = 10;
Native.BlockRenderLayer.seasons_far_alpha = 11;
Native.BlockRenderLayer.water = 7;
function alert()
function ItemExtraData()
function RenderMesh()


Callback.addCallback("EntityInteract", function () {
  alert("Interract!");
});